// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for rounding up a transaction and applying it to a savings goal.
 *
 * - roundUpTransaction - A function that handles the transaction round-up process.
 * - RoundUpTransactionInput - The input type for the roundUpTransaction function.
 * - RoundUpTransactionOutput - The return type for the roundUpTransaction function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RoundUpTransactionInputSchema = z.object({
  transactionId: z.string().describe('The ID of the transaction to round up.'),
  transactionAmount: z.number().describe('The amount of the transaction.'),
  goalId: z.string().describe('The ID of the goal to apply the round-up to.'),
});
export type RoundUpTransactionInput = z.infer<
  typeof RoundUpTransactionInputSchema
>;

const RoundUpTransactionOutputSchema = z.object({
  roundUpAmount: z.number().describe('The amount that was rounded up.'),
  newGoalAmount: z.number().describe('The new balance of the savings goal.'),
});
export type RoundUpTransactionOutput = z.infer<
  typeof RoundUpTransactionOutputSchema
>;

export async function roundUpTransaction(
  input: RoundUpTransactionInput
): Promise<RoundUpTransactionOutput> {
  return roundUpTransactionFlow(input);
}

const roundUpTransactionFlow = ai.defineFlow(
  {
    name: 'roundUpTransactionFlow',
    inputSchema: RoundUpTransactionInputSchema,
    outputSchema: RoundUpTransactionOutputSchema,
  },
  async (input) => {
    // This is a simplified placeholder implementation.
    // A real implementation would involve Firestore transactions as described in the spec.
    
    if (input.transactionAmount >= 0) {
      // Only applies to debits
      return { roundUpAmount: 0, newGoalAmount: 0 };
    }
    
    const amount = Math.abs(input.transactionAmount);
    const roundUpAmount = Math.ceil(amount) - amount;

    if (roundUpAmount === 0) {
        return { roundUpAmount: 0, newGoalAmount: 0 };
    }

    // In a real scenario, you would fetch the goal, update its balance,
    // and perform other actions as described in SPEC-1.1-Patch-01.
    // For now, we'll just simulate the output.
    
    console.log(`Rounding up transaction ${input.transactionId} by ${roundUpAmount.toFixed(2)} for goal ${input.goalId}`);

    // Placeholder for new goal amount
    const newGoalAmount = 1250 + roundUpAmount; // Assuming a base amount for demo

    return {
      roundUpAmount,
      newGoalAmount,
    };
  }
);
